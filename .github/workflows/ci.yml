name: WZRD Strategy System CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-schemas:
    runs-on: ubuntu-latest
    name: "üìã Schema Validation"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install jsonschema pyyaml

    - name: Validate JSON schemas
      run: |
        python -c "
        import json, jsonschema

        # Test strategy schema
        with open('schemas/strategy_spec.schema.json') as f:
            schema = json.load(f)
            jsonschema.Draft7Validator.check_schema(schema)
            print('‚úÖ Strategy schema is valid')

        # Test test plan schema
        with open('schemas/test_plan.schema.json') as f:
            schema = json.load(f)
            jsonschema.Draft7Validator.check_schema(schema)
            print('‚úÖ Test plan schema is valid')
        "

  validate-strategies:
    runs-on: ubuntu-latest
    name: "üéØ Strategy Validation"
    needs: validate-schemas

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Validate all strategies
      run: |
        python -c "
        from utils.validation import StrategyValidator, load_strategy_spec, load_test_plan
        import os

        validator = StrategyValidator()
        total_strategies = 0
        valid_strategies = 0

        for root, dirs, files in os.walk('strategies'):
            for file in files:
                if file == 'StrategySpec.json':
                    total_strategies += 1
                    spec_path = os.path.join(root, file)
                    try:
                        spec = load_strategy_spec(spec_path)
                        errors = validator.validate_strategy_spec(spec)
                        if not errors:
                            valid_strategies += 1
                            print(f'‚úÖ {spec_path}')
                        else:
                            print(f'‚ùå {spec_path}')
                            for error in errors:
                                print(f'   Error: {error}')
                    except Exception as e:
                        print(f'‚ùå {spec_path} - Exception: {e}')

        print(f'\\nValidation Summary: {valid_strategies}/{total_strategies} strategies valid')

        if valid_strategies != total_strategies:
            exit(1)
        "

  test-engine:
    runs-on: ubuntu-latest
    name: "‚ö° Engine Testing"
    needs: validate-strategies

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run engine test
      run: |
        mkdir -p runs/ci-test
        python engine/runner.py \
          --strategy strategies/spy_vwap/StrategySpec.json \
          --plan strategies/spy_vwap/TestPlan.yaml \
          --output runs/ci-test \
          --verbose

    - name: Verify outputs
      run: |
        echo "üîç Checking required output files..."

        required_files=(
          "runs/ci-test/signals.parquet"
          "runs/ci-test/trades.csv"
          "runs/ci-test/equity_curve.csv"
          "runs/ci-test/report.json"
          "runs/ci-test/acceptance_results.json"
        )

        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file exists"
          else
            echo "‚ùå $file missing"
            exit 1
          fi
        done

        echo "‚úÖ All required outputs generated"

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: engine-test-results
        path: runs/ci-test/

  acceptance-tests:
    runs-on: ubuntu-latest
    name: "üß™ Acceptance Tests"
    needs: test-engine

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run acceptance tests
      run: |
        python -c "
        from utils.validation import AcceptanceTestRunner, StrategyValidator, load_strategy_spec

        validator = StrategyValidator()
        runner = AcceptanceTestRunner(validator)

        # Test main strategy
        spec = load_strategy_spec('strategies/spy_vwap/StrategySpec.json')
        results = runner.run_acceptance_tests(spec)

        print(f'Acceptance Tests Results:')
        print(f'‚úÖ Passed: {results[\"passed\"]}')

        if results['errors']:
            print('‚ùå Errors:')
            for error in results['errors']:
                print(f'   {error}')

        if results['warnings']:
            print('‚ö†Ô∏è  Warnings:')
            for warning in results['warnings']:
                print(f'   {warning}')

        if not results['passed']:
            exit(1)
        "

  system-tests:
    runs-on: ubuntu-latest
    name: "üî¨ System Tests"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run system tests
      run: |
        python tests/test_system.py